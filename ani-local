#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
WHITE_BOLD='\033[1;37m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration file path
CONFIG_FILE="$HOME/.local/bin/ani-local.conf"

# Load configuration
if [ -f "$CONFIG_FILE" ]; then
  source "$CONFIG_FILE"
else
  echo -e "${RED}Configuration file not found: $CONFIG_FILE${NC}"
  exit 1
fi

LOG_FILE="$(dirname "$0")/ani-local.log"

# Ensure the log file exists
touch "$LOG_FILE"

function show_logs() {
  if [ -f "$LOG_FILE" ]; then
    less "$LOG_FILE"
  else
    echo -e "${RED}Log file not found.${NC}"
  fi
  exit 0
}

if [ "$1" == "logs" ]; then
  show_logs
fi

if [ ! -d "$SOURCE_DIR" ]; then
  echo -e "${RED}Directory $SOURCE_DIR does not exist.${NC}"
  exit 1
fi

function get_last_seen() {
  local subdir="$1"
  grep "$subdir" "$LOG_FILE" | tail -n 1 | awk -F '/' '{print $NF}' | sed 's/.mp4//'
}

function select_subdir() {
  while true; do
    clear
    mapfile -t subdirs < <(find "$SOURCE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")

    if [ ${#subdirs[@]} -eq 0 ]; then
      echo -e "${RED}No subdirectories found in $SOURCE_DIR.${NC}"
      exit 1
    fi

    subdirs+=("Exit")

    echo -e "${CYAN}Select an anime series:${NC}"
    PS3="Option: "
    select subdir in "${subdirs[@]}"; do
      if [[ "$subdir" == "Exit" ]]; then
        echo -e "${YELLOW}Exiting...${NC}"
        exit 0
      elif [ -n "$subdir" ]; then
        select_file "$subdir"
        break
      else
        echo -e "${RED}Invalid selection.${NC}"
      fi
    done
  done
}

function select_file() {
  local subdir="$1"
  local last_seen=$(get_last_seen "$subdir")
  local current_page=1
  local per_page=10
  local start_index=0

  mapfile -t files < <(ls "$SOURCE_DIR/$subdir"/*.mp4 2>/dev/null | sort -V)

  if [ -n "$last_seen" ]; then
    for i in "${!files[@]}"; do
      if [[ "${files[$i]}" == *"$last_seen.mp4" ]]; then
        current_page=$(( (i / per_page) + 1 ))
        start_index=$(( (current_page - 1) * per_page ))
        break
      fi
    done
  fi

  while true; do
    clear
    local end_index=$(( start_index + per_page - 1 ))

    if [ ${#files[@]} -eq 0 ]; then
      echo -e "${RED}No .mp4 files found in $SOURCE_DIR/$subdir.${NC}"
      return
    fi

    echo -e "${CYAN}Select an episode to watch (Page $current_page):${NC}"
    for i in $(seq $start_index $end_index); do
      if [ $i -ge ${#files[@]} ]; then
        break
      fi
      file_name=$(basename "${files[$i]}" .mp4)
      if [[ "$file_name" == "$last_seen" ]]; then
        echo -e "${WHITE_BOLD}$((i + 1)))${NC} ${YELLOW}(Last seen) $file_name${NC}"
      else
        echo -e "${WHITE_BOLD}$((i + 1)))${NC} ${file_name}"
      fi
    done

    read -rp "Option: " choice

    case $choice in
      [0-9]*)
        if [ $choice -gt 0 ] && [ $choice -le ${#files[@]} ]; then
          local selected_file="${files[$((choice - 1))]}"
          local file_base=$(basename "${selected_file}" .mp4)
          echo -e "${GREEN}Playing: $selected_file${NC}"

          mpv --fs "$selected_file" > >(grep -E '^[0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{2}:[0-9]{2}' | tee -a "$LOG_FILE") 2>/dev/null

          echo "$(date '+%d/%m/%Y - %I:%M%p') - $selected_file" >> "$LOG_FILE"
        else
          echo -e "${RED}Invalid selection.${NC}"
        fi
        ;;
      n)
        if [ $end_index -lt $((${#files[@]} - 1)) ]; then
          current_page=$((current_page + 1))
          start_index=$(( (current_page - 1) * per_page ))
        else
          echo -e "${YELLOW}You are already on the last page.${NC}"
        fi
        ;;
      p)
        if [ $current_page -gt 1 ]; then
          current_page=$((current_page - 1))
          start_index=$(( (current_page - 1) * per_page ))
        else
          echo -e "${YELLOW}You are already on the first page.${NC}"
        fi
        ;;
      r)
        return
        ;;
      q)
        echo -e "${YELLOW}Exiting...${NC}"
        exit 0
        ;;
      *)
        echo -e "${RED}Invalid selection.${NC}"
        ;;
    esac
  done
}

select_subdir

